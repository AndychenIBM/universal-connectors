input {
	  generator { 
	  type => "syslog"
	  lines => [
        'Aug  6 18:30:11 rh7u4x64t mysql_audit_log: { "timestamp": "2020-08-12 19:55:04", "id": 0, "class": "table_access", "event": "read", "connection_id": 15, "account": { "user": "guardium_qa", "host": "localhost" }, "login": { "user": "guardium_qa", "os": "", "ip": "", "proxy": "" }, "table_access_data": { "db": "guardium_qa", "table": "pet", "query": "select * from pet", "sql_command": "select" } },',
        'Aug  6 18:30:11 rh7u4x64t mysql_audit_log: { "timestamp": "2020-08-13 14:40:17", "id": 0, "class": "general", "event": "status", "connection_id": 19, "account": { "user": "guardium_qa", "host": "localhost" }, "login": { "user": "guardium_qa", "os": "", "ip": "", "proxy": "" }, "general_data": { "command": "Query", "sql_command": "select", "query": "select * from pets", "status": 1046 } },',
        'Aug  6 18:30:11 rh7u4x64t mysql_audit_log: { "timestamp": "2020-08-19 20:06:48", "id": 0, "class": "connection", "event": "connect", "connection_id": 10, "account": { "user": "guardium_qa", "host": "localhost" }, "login": { "user": "guardium_qa", "os": "", "ip": "", "proxy": "" }, "connection_data": { "connection_type": "socket", "status": 0, "db": "", "connection_attributes": { "_pid": "21288", "_platform": "x86_64", "_os": "Linux", "_client_name": "libmysql", "os_user": "mysql8_ent", "_client_version": "8.0.21" } } },',
        'Aug  6 18:30:11 rh7u4x64t mysql_audit_log: { "timestamp": "2020-08-20 15:39:21", "id": 0, "class": "connection", "event": "connect", "connection_id": 17, "account": { "user": "guardium_qa", "host": "localhost" }, "login": { "user": "guardium_qa", "os": "", "ip": "", "proxy": "" }, "connection_data": { "connection_type": "socket", "status": 1045, "db": "" } }'
        ]
	  count => 1
  }

}

filter {
        if [type] == "syslog" {
		grok { 
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:server_hostname} %{SYSLOGPROG:source_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:mysql_message}" }

		}
		date {
		  match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
		}

            if "_grokparsefailure" in [tags] {
                drop { }
            }
		mysql_filter_guardium {}
        }
	mutate { remove_field => [
		"message",
        "host", "path",
        "mysql_message"
		]
	}
}

output {
  stdout { codec => rubydebug }
}


