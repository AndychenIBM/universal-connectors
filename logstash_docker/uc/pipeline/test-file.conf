input {
	file {
		type => "syslog"
		path => ["/test/1/p*.log"]
		mode => "read"
        file_completed_action => "log"
        file_completed_log_path => "/test/files-ingested.log"
        #exit_after_read => true
    }
}

filter {
	if [type] == "syslog" {
		grok { # or TIMESTAMP_ISO8601, for mongoaudit.log messages tests, or if SYSLOGTIMESTAMP doesn't work
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:server_hostname} %{SYSLOGPROG:source_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
		}
		date {
		  match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
		}
		java_filter_example {}
	} 
	
	mutate { remove_field => [
		"message", 
		"syslog_timestamp", 
		"source_program", "program", "syslog_pid",
		"syslog_message", 
		"server_hostname", "host" 
		]
	}
	
	#for test events/sec
	metrics {
		meter => "events"
		add_tag => "metric"
	}

}

output {
	if [GuardRecord] { java_output_to_guardium {} }
	#file { path => "/test/test-%{+YYYY-MM-dd}.txt" }
	if "metric" in [tags] { stdout { codec => line { format => "rate: %{[events][rate_1m]}" } } }
}