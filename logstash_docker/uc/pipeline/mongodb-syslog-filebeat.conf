input {
  tcp { port => 5000 type => syslog dns_reverse_lookup_enabled => false }
  udp { port => 5141 type => syslog }
  beats { port => 5044 type => filebeat }
}

filter {

  if [type] == "syslog" {
    grok { # or TIMESTAMP_ISO8601, for mongoaudit.log messages tests, or if SYSLOGTIMESTAMP doesn't work
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:server_hostname} %{SYSLOGPROG:source_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    mutate { rename => { "host" => "server_ip" } }
    mongodb_guardium_filter {}
  }

  if [type] == "filebeat" {
    mutate { add_field => { "source_program" => "mongod" } }
    mutate { add_field => { "client_hostname" => "%{[agent][hostname]}" } }
    mutate { add_field => { "server_hostname" => "%{[host][hostname]}" } }
    mutate { add_field => { "server_ip" => "%{[host][ip][0]}" } }
    mutate { replace => { "message" => "%{source_program}: %{message}" } }

    mongodb_guardium_filter {}
  }

  if "_mongoguardium_json_parse_error" not in [tags] {
    mutate { remove_field => ["message","syslog_timestamp","source_program","program","syslog_pid","syslog_message","server_hostname","client_hostname","host","ecs","log","agent","input"] }
  }

  #for test events/sec
  metrics {
    meter => "events"
    add_tag => "metric"
  }
}

output {
  if [GuardRecord] {
    java_output_to_guardium {} 
  }

  if "metric" in [tags] {
    file {
      codec => line { format => "rate: %{[events][rate_1m]}" }
      path => "/var/log/uc/events_per_sec-%{+YYYY-MM-dd}.log"
    }
  }
}