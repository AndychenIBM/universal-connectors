#/*
#Copyright 2022-2023 IBM Inc. - All Rights Reserved.
#SPDX-License-Identifier: Apache-2.0
#*/

input{
	jdbc {
             jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
              jdbc_connection_string =>"jdbc:sqlserver://<SERVER_IP>:<SERVER_PORT>;"
              jdbc_user => "<USERNAME>"
              jdbc_password => "<PASSWORD>"
              statement => "select connection_id,event_time,database_name,server_instance_name,client_ip, application_name, host_name, server_principal_name,object_name,statement,succeeded,session_id,
                           DATEDIFF_BIG(ns, '1970-01-01 00:00:00.00000', event_time) AS updatedeventtime FROM msdb.dbo.gcloudsql_fn_get_audit_file('/var/opt/mssql/audit/*', NULL, NULL)
                           where  ((succeeded =1) or (succeeded =0 and statement like '%Login failed%' )and application_name not like 'SQLServerCEIP') and statement != '' and schema_name not in ('sys')
                           and database_principal_name not in('public') and object_name NOT IN ('dbo','syssubsystems','change_tables','lsn_time_mapping')
                           and DATEDIFF_BIG(ns, '1970-01-01 00:00:00.00000', event_time) > :sql_last_value order by event_time;"
              use_column_value => true
              tracking_column_type => "numeric"
              tracking_column => "updatedeventtime"
              type => "MSSQL-GCP"
              schedule => "*/1 * * * *"
		      #This location stores the offset till which records are processed
		      last_run_metadata_path => "./.gcpmssql_logstash_jdbc_last_run"
			  #Insert the Project_ID of GCP server
              add_field => {"project_id" => "<PROJECT_ID>"}

    }
}

filter{
   if [type]=="MSSQL-GCP" {
      grok { match => { "event_time" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}T%{TIME:time}" } }
      mutate { add_field => { "mssqlTimeStamp" => "%{year}-%{month}-%{day}T%{time}Z" } }
      date{
         match => ["mssqlTimeStamp", "ISO8601"]
         target => "mssqlEventTime"
      }

      if [session_id]{
         mutate { add_field => { "[GuardRecord][sessionId]" => "%{connection_id}" }}
      }
      else{
         mutate { add_field => { "[GuardRecord][sessionId]" => "NA" }}
      }

      if [database_name]{
         mutate { add_field => { "[GuardRecord][dbName]" => "%{database_name}" }}
		 mutate { add_field => { "[GuardRecord][accessor][serviceName]" => "%{database_name}"} }


      }
      else{
         mutate { add_field => { "[GuardRecord][dbName]" => "NA" }}
      }

      mutate { add_field => { "[GuardRecord][appUserName]" =>  "GCPService" }}


      ruby { code => "event.set('[GuardRecord][time][timstamp]', event.get('mssqlEventTime').to_i * 1000)" }
      mutate { add_field => { "[GuardRecord][time][minOffsetFromGMT]" => "0" }}
      mutate { add_field => { "[GuardRecord][time][minDst]" => "0" }}

      if [client_ip] == "local machine" or [client_ip] == "Unknown"
      {
         mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "0.0.0.0"}}
      }
      else{
         mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "%{client_ip}" }}
      }

      mutate { add_field => { "[GuardRecord][sessionLocator][clientPort]" => "-1" }}
      mutate { add_field => { "[GuardRecord][sessionLocator][serverIp]" => "0.0.0.0" }}
      mutate { add_field => { "[GuardRecord][sessionLocator][serverPort]" => "-1" }}
      mutate { add_field => { "[GuardRecord][sessionLocator][isIpv6]" => "false" }}
      ruby { code => 'event.set("[GuardRecord][sessionLocator][clientIpv6]", nil)' }
      ruby { code => 'event.set("[GuardRecord][sessionLocator][serverIpv6]", nil)' }


      if [server_principal_name]{
         mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "%{server_principal_name}" }}
      }
      else{
         mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "NA" }}
      }
      mutate { add_field => { "[GuardRecord][accessor][dataType]" => "TEXT" }}
      mutate { add_field => { "[GuardRecord][accessor][osUser]" => "" }}
      mutate { add_field => { "[GuardRecord][accessor][serverType]" => "MSSQL" }}
      mutate { add_field => { "[GuardRecord][accessor][commProtocol]" => "GCPApiCall" }}
      mutate { add_field => { "[GuardRecord][accessor][dbProtocol]" => "MS SQL SERVER" }}
      mutate { add_field => { "[GuardRecord][accessor][language]" => "MSSQL" }} # MSSQL is a Guardium internal code for MSSQL
      mutate { add_field => { "[GuardRecord][accessor][serverOs]" => "" }}
      mutate { add_field => { "[GuardRecord][accessor][clientOs]" => "" }}

        if [host_name]
	  {
	    mutate { add_field => { "[GuardRecord][accessor][clientHostName]" => "%{host_name}" }}
      }
	  else
	  {
	  	mutate { add_field => { "[GuardRecord][accessor][clientHostName]" => "" }}

	  }

	  mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "%{project_id}.googleapis.com" }}

      mutate { add_field => { "[GuardRecord][accessor][dbProtocolVersion]" => "" }}
      mutate { add_field => { "[GuardRecord][accessor][clientMac]" => ""} }
      mutate { add_field => { "[GuardRecord][accessor][serverDescription]" => "" } }

      if [application_name]{
         mutate { add_field => { "[GuardRecord][accessor][sourceProgram]" => "%{application_name}"} }
      }
      else{
         mutate { add_field => { "[GuardRecord][accessor][sourceProgram]" => "NA"} }
      }



      mutate {add_field => { "isSuccess" => "%{succeeded}" }}

      if [isSuccess] == "true" {
         ruby { code => 'event.set("[GuardRecord][data][construct]", nil)' }
         mutate { add_field => { "[GuardRecord][data][originalSqlCommand]" => "%{statement}" }}
			mutate { add_field => { "[GuardRecord][exception][exceptionTypeId]" => "NA" }}


         ruby { code => 'event.set("[GuardRecord][exception]", nil)' }

      }
      else {
         mutate { add_field => { "[GuardRecord][exception][exceptionTypeId]" => "LOGIN_FAILED" }}
         mutate { add_field => { "[GuardRecord][exception][description]" => "%{statement}" }}
         mutate { add_field => { "[GuardRecord][exception][sqlString]" => "NA" }}

         ruby { code => 'event.set("[GuardRecord][data]", nil)' }

      }
      mutate {
         convert => {"[GuardRecord][sessionLocator][clientPort]" => "integer"}
         convert => {"[GuardRecord][sessionLocator][serverPort]" => "integer"}
         convert => {"[GuardRecord][sessionLocator][isIpv6]" => "boolean"}
         convert => {"[GuardRecord][time][minOffsetFromGMT]" => "integer"}
         convert => {"[GuardRecord][time][minDst]" => "integer"}
      }
       prune {
                 whitelist_names => [ "GuardRecord" ]
         }
         mutate {
                  convert => { "[GuardRecord]" => "string" }
         }
         json_encode {
                  source => "[GuardRecord]"
         }

   }
}
output {
	stdout { codec => rubydebug }
}
