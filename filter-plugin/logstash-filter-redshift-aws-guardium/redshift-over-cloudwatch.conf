#/*
#Copyright 2022-2023 IBM Inc. All rights reserved
#SPDX-License-Identifier: Apache-2.0
#*/

    input{
         cloudwatch_logs
            {
                #Mandatory arguments:
                #Insert the log group that is created for the data instance
                log_group => ["<LOG_GROUP>" ]  #e.g. ["/aws/redshift/cluster/ds-redshift-cluster/useractivitylog","/aws/redshift/cluster/ds-redshift-cluster/connectionlog"]
                log_group_prefix => true
                start_position => "end"
                region => "<REGION>" # #Region that has the DB, Default value: us - east - 1
                sincedb_path => "NUL"  #Non-Mandatory
                event_filter => ""
                codec => multiline {
                            pattern => "((^'%{TIMESTAMP_ISO8601:timestamp})|(^(?<action>[^:]*) \|%{DAY:day}\, %{MONTHDAY:md} %{MONTH:month} %{YEAR:year} %{TIME:time}))"
                            negate => true
                            what => "previous"
                }
                #Insert the access key and secret that has access to log group
                access_key_id => "<ACCESS_KEY_ID>"
                secret_access_key => "<SECRET_KEY>"
                type => "redS"
                add_field => {"account_id" => "<ACOUNT_ID>" }  #Insert the account id of the AWS account
                add_field => {"cluster_name" => "<CLUSTER_NAME>"}  #Insert the name of cluster you have created
             }
          }

    filter
    {
    if [type] == "redS" {
    mutate
        {
        add_field => { "serverHostnamePrefix" => "%{account_id}-%{cluster_name}" }
        add_field => { "dbprefix" => "%{account_id}:%{cluster_name}" }
        }
    if "::" in [message] {
    grok {
        match => {"message" => ["(?<action>[^:]*) \|%{DAY:day}\, %{MONTHDAY:md} %{MONTH:month} %{YEAR:year} %{TIME:time}\|(?<remotehost>[^\s]*) \|(?<remoteport>[^\s]*) \|(?<pid>[^\s]*)\|(?<dbname>[^\s]*) \|(?<username>[^\s]*) \|(?<authmethod>[^:]*) \|%{NUMBER:duration}\|(?<sslversion>[^\s]*) \|(?<sslcipher>[^:]*) \|(?<mtu>[^\s]*)\|%{SPACE:sslcompression}\|%{SPACE:sslexpansion}\|%{SPACE:iamauthguid}\|(?<application_name>[^:]*) \|(?<os_version>[^:]*) \|(?<driver_version>[^:]*) \|(?<plugin_name>[^:]*) \|(?<protocol_version>[^:]*)\|(?<id>[^:]*)",
        "(?<action>[^:]*) \|%{DAY:day}\, %{MONTHDAY:md} %{MONTH:month} %{YEAR:year} %{TIME:time}\|(?<remotehost>[^\s]*) \|(?<remoteport>[^\s]*) \|(?<pid>[^\s]*)\|(?<dbname>[^\s]*) \|(?<username>[^\s]*) \|(?<authmethod>[^:]*) \|(?<duration>[^\s]*)\|(?<sslversion>[^\s]*) \|(?<sslcipher>[^\s]*) \|(?<mtu>[^\s]*)\|%{SPACE:sslcompression}\|%{SPACE:sslexpansion}\|(?<iamauthguid>[^\s]*) \|(?<applicationname>[^:]*) \|(?<os_version>[^:]*) \|(?<driverversion>[^:]*) \|%{SPACE:plugin_name} \|(?<protocolversion>[^:]*)\|(?<id>[^\s]*)"]
                 }
         }
    }
    if "LOG:" in [message] {
    grok {
    match => {"message" => "\'%{TIMESTAMP_ISO8601:timestamp} %{TZ:timezone}\s\[\s(?<dbtype>[^\s]*)=(?<dbname>[^\s]*)\s(?<usertype>[^\s]*)=(?<user>[^\s]*)\s(?<pidtype>[^\s]*)=(?<pid>[^\s]*)\s(?<useridtype>[^\s]*)=(?<userid>[^\s]*)\s(?<xidtype>[^\s]*)=(?<xid>[^\s]*)\s\]\'\s%{GREEDYDATA:sql_query}"
            }
        }
    }
    redshift_guardium_connector{}
    prune {
                whitelist_names => ["GuardRecord"]
           }
   }
}