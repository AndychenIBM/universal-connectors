filter{
    if [type] == "profile_name" {
    		grok { match => { "event_time" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}T%{TIME:time}" } }
    		mutate { add_field => { "mssqlTimeStamp" => "%{year}-%{month}-%{day}T%{time}Z" } }
    		date{
    			match => ["mssqlTimeStamp", "ISO8601"]
    			target => "mssqlEventTime"
    		}

    		if [session_id]{
    			mutate { add_field => { "[GuardRecord][sessionId]" => "%{session_id}" }}
    		}
    		else{
    			mutate { add_field => { "[GuardRecord][sessionId]" => "NA" }}
    		}

    		if [database_name]{
    			mutate { add_field => { "[GuardRecord][dbName]" => "%{account_id}:%{database_name}" }}

    		}
    		else{
    			mutate { add_field => { "[GuardRecord][dbName]" => "NA" }}
    		}

    		mutate { add_field => { "[GuardRecord][appUserName]" =>  "AWSService" }}

    		ruby { code => "event.set('[GuardRecord][time][timstamp]', event.get('mssqlEventTime').to_i * 1000)" }
    		mutate { add_field => { "[GuardRecord][time][minOffsetFromGMT]" => "0" }}
    		mutate { add_field => { "[GuardRecord][time][minDst]" => "0" }}

    		if [client_ip] == "local machine" or [client_ip] == "Unknown"{
    			mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "0.0.0.0"}}
    		}else{
    			mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "%{client_ip}" }}
    		}
    		mutate { add_field => { "[GuardRecord][sessionLocator][clientPort]" => "-1" }}
    		mutate { add_field => { "[GuardRecord][sessionLocator][serverIp]" => "0.0.0.0" }}
    		mutate { add_field => { "[GuardRecord][sessionLocator][serverPort]" => "-1" }}
    		mutate { add_field => { "[GuardRecord][sessionLocator][isIpv6]" => "false" }}
    		ruby { code => 'event.set("[GuardRecord][sessionLocator][clientIpv6]", nil)' }
    		ruby { code => 'event.set("[GuardRecord][sessionLocator][serverIpv6]", nil)' }

    		if [server_principal_name]{
    			mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "%{server_principal_name}" }}
    		}
    		else{
    			mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "NA" }}
    		}
    		mutate { add_field => { "[GuardRecord][accessor][dataType]" => "TEXT" }}
    		mutate { add_field => { "[GuardRecord][accessor][osUser]" => "" }}
    		mutate { add_field => { "[GuardRecord][accessor][serverType]" => "MSSQL" }}
    		mutate { add_field => { "[GuardRecord][accessor][commProtocol]" => "AwsApiCall" }}
    		mutate { add_field => { "[GuardRecord][accessor][dbProtocol]" => "MS SQL SERVER" }}
    		mutate { add_field => { "[GuardRecord][accessor][language]" => "MSSQL" }} # MSSQL is a Guardium internal code for MSSQL
    		mutate { add_field => { "[GuardRecord][accessor][serverOs]" => "" }}
    		mutate { add_field => { "[GuardRecord][accessor][clientOs]" => "" }}

    		if [server_name]
    		{
    			mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "%{account_id}_%{server_name}" }}
    		}
    		else
    		{
    			mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "%{account_id}_mssql" }}
    		}

    		mutate { add_field => { "[GuardRecord][accessor][clientHostName]" => "" }}
    		mutate { add_field => { "[GuardRecord][accessor][dbProtocolVersion]" => "" }}
    		mutate { add_field => { "[GuardRecord][accessor][clientMac]" => ""} }
    		mutate { add_field => { "[GuardRecord][accessor][serverDescription]" => "" } }
    		mutate { add_field => { "[GuardRecord][accessor][serviceName]" => ""} }

    		if [application_name]{
    			mutate { add_field => { "[GuardRecord][accessor][sourceProgram]" => "%{application_name}"} }
    		}
    		else{
    			mutate { add_field => { "[GuardRecord][accessor][sourceProgram]" => "NA"} }
    		}

    		mutate {add_field => { "isSuccess" => "%{succeeded}" }}

    		if [isSuccess] == "true" {
    			ruby { code => 'event.set("[GuardRecord][data][construct]", nil)' }
    			mutate { add_field => { "[GuardRecord][data][originalSqlCommand]" => "%{statement}" }}

    			ruby { code => 'event.set("[GuardRecord][exception]", nil)' }
    		}
    		else {
    			mutate { add_field => { "[GuardRecord][exception][exceptionTypeId]" => "LOGIN_FAILED" }}
    			mutate { add_field => { "[GuardRecord][exception][description]" => "%{statement}" }}
    			mutate { add_field => { "[GuardRecord][exception][sqlString]" => "NA" }}

    			ruby { code => 'event.set("[GuardRecord][data]", nil)' }

    		}
    		json_encode {
                        source => "[GuardRecord]"
                        target => "[GuardRecord]"
                    }
    		mutate {
    			convert => {"[GuardRecord][sessionLocator][clientPort]" => "integer"}
    			convert => {"[GuardRecord][sessionLocator][serverPort]" => "integer"}
    			convert => {"[GuardRecord][sessionLocator][isIpv6]" => "boolean"}
    			convert => {"[GuardRecord][time][minOffsetFromGMT]" => "integer"}
    			convert => {"[GuardRecord][time][minDst]" => "integer"}
    		}
    	    prune {
                        whitelist_names => [ "GuardRecord" ]
            }
    }
}